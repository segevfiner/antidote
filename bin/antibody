#!/usr/bin/env zsh

ANTIBODY_VERSION="1.9.4"

setopt extended_glob no_monitor pipefail

echos() {
  print -r -- "$@"
}

echoln() {
  printf '%s\n' "${@[@]}"
}

echoerr() {
  print -ru2 -- "$@"
}

-antibody-version() {
  echos "antibody version $ANTIBODY_VERSION"
}

-antibody-cmd-help() {
  local usage=$(cat <<'EOS'
usage: antibody [<flags>] <command> [<args> ...]

A pure Zsh implementation of the legacy antibody plugin manager
Packaged with the antidote plugin manager

Flags:
  -h, --help           Show context-sensitive help.
  -v, --version        Show application version.

Commands:
  help [<command>...]
    Show help.

  bundle [<bundles>...]
    downloads a bundle and prints its source line

  update
    updates all previously bundled bundles

  home
    prints where antibody is cloning the bundles

  purge <bundle>
    purges a bundle from your computer

  list
    lists all currently installed bundles

  path <bundle>
    prints the path of a currently cloned bundle

  init
    initializes the shell so Antibody can work as expected

EOS
  )
  echoln "${usage[@]}" ''
}

-antibody-cmd-init() {
  local antibody_path=${${(%):-%x}:a}
  local script=$(cat <<EOS
#!/usr/bin/env zsh
antibody() {
  case "\$1" in
  bundle)
    source <( ${antibody_path} \$@ ) || ${antibody_path} \$@
    ;;
  *)
    ${antibody_path} \$@
    ;;
  esac
}

_antibody() {
  IFS=' ' read -A reply <<< "help bundle update home purge list path init"
}
compctl -K _antibody antibody
EOS
  )
  echoln "$script[@]" ''
}

-antibody-cmd-home() {
  if [[ -n "$ANTIBODY_HOME" ]]; then
    echos $ANTIBODY_HOME
    return
  fi

  local cachedir ostype=${ANTIBODY_TEST_OSTYPE:-$OSTYPE}
  if [[ "$ostype" == darwin* ]]; then
    cachedir=$HOME/Library/Caches
  elif [[ "$ostype" == (cygwin|msys)* ]]; then
    cachedir=${LOCALAPPDATA:-$LocalAppData}
    if type cygpath > /dev/null; then
      cachedir=$(cygpath "$result")
    fi
  else
    cachedir=${XDG_CACHE_HOME:-$HOME/.cache}
  fi
  echos $cachedir/antibody
}

-antibody-cmd-update() {
  local antibody_home=$(-antibody-cmd-home)
  echos "Updating all bundles in $antibody_home..."

  if [[ ! -d $antibody_home ]]; then
    echoerr "antibody: error: failed to update: open ${antibody_home}: no such file or directory"
    return 1
  fi

  local bundledir url
  for bundledir in $antibody_home/*(/N); do
    url=$(git -C "$bundledir" config remote.origin.url)
    echos "antibody: updating: $url"
    () {
      local oldsha=$(git -C "$1" rev-parse --short HEAD)
      git -C "$1" pull --quiet --ff --rebase --autostash
      local newsha=$(git -C "$1" rev-parse --short HEAD)
      if [[ $oldsha != $newsha ]]; then
        echos "antibody: updated: $2 $oldsha -> $newsha"
      fi
    } "$bundledir" "$url" &
  done
  wait
}


-antibody-cmd-path() {
  local url=$(-antibody-to-url $1)
  url=${url%.git}
  url=${url:gs/\@/-AT-}
  url=${url:gs/\:/-COLON-}
  url=${url:gs/\//-SLASH-}
  print $(-antibody-cmd-home)/$url
}

-antibody-to-url() {
  local url=$1
  if [[ $url != *://* && $url != git@*:*/* ]]; then
    url=https://github.com/$1
  fi
  echos $url
}

-antibody() {
  local -a o_help o_version
  local badopt
  while (( $# )); do
    case $1 in
      -h|--help)    o_help+=($1)    ;;
      -v|--version) o_version+=($1) ;;
      --)           shift           ; break ;;
      -*)           badopt=$1       ; break ;;
      *)                              break ;;
    esac
    shift
  done

  if [[ -n $badopt ]]; then
    echoerr "antibody: error: unknown flag '$badopt', try --help"
    return 1
  fi

  if (( $#o_help )); then
    -antibody-cmd-help && return
  elif (( $#o_version )); then
    -antibody-version && return
  fi

  local cmd=${1:-help}; shift
  local commands=(help bundle update home purge list path init)
  if ! (( $commands[(Ie)$cmd] )); then
    echoerr "antibody: error: expected command but got \"$cmd\", try --help"
    return 1
  fi

  -antibody-cmd-${cmd} "$@"
}
-antibody "$@"
